<?php if (!defined('BASEPATH')) exit('Direct access not allowed.');

/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Quizzical.
 *
 * The Initial Developer of the Original Code is Jonathan Wilde.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

class Schema {
    private $CI = false;
	private $type = false;
	private $details = false;

    function __construct () {
        // Grab a reference to CodeIgniter and load up the database utilities
        // that the individual
        $this->CI =& get_instance();
        $this->CI->load->dbforge();

        // Load up our config file, which contains information about how to
        // determine the version of the schema that has currently been applied
        $this->CI->config->load('schema');
		$this->type = $this->CI->config->item('schema_version_type');
		$this->details = $this->CI->config->item('schema_version_details');

        // Set up a message array in CodeIgniter so that we can store messages
        // generated by the migration process
        $this->CI->messages = array();
    }

    function version () {
        // Based on the type of version store that we're using, use the
        // appropriate method to get and return the version number
		switch ($this->type) {
			case 'static':
				return $this->details['version'];
			case 'key':
				$result = $this->CI->db->get_where(
					$this->details['table_name'],
					array(
						$this->details['key_column_name'] =>
						$this->details['key_column_value']
					)
				);

				if ($result->num_rows() > 0) {
					return (int) $result->row()
						->{$this->details['value_column_name']};
				} else {
					return 0;
				}
		}
    }

    function update ($version) {
        // Based on the type of version store we're using, try to update the
        // version type
		switch ($this->type) {
			case 'static':
				return false;
			case 'key':
				$this->CI->db->update(
					$this->details['table_name'],
					array(
						$this->details['value_column_name'] => $version
					),
					array(
						$this->details['key_column_name'] =>
						$this->details['key_column_value']
					)
				);

				return true;
		}
    }

    function items ($what) {
        // Create a variable to hold our list of versions
        $items = array();

        // Loop through all of the PHP files that match our schema format
        foreach (glob(APPPATH . "schemas/*_*.php") as $schema) {
            // Depending on what type of information we're querying from the
            // schema file list, determine what type of information to push
            // into the items array
            if ($what == "versions") {
                // Determine the version that the schema file corresponds to
                $item = (int) substr(basename($schema), 0, 4);
            } elseif ($what == "groups") {
                // Determine the schema modification group that the schema file
                // corresponds to
                $item = substr(basename($schema, ".php"), 5);
            }

            // Add it to our items array
            $items[$item] = $item;
        }

        // Return the list of items back to the calling function
        return $items;
    }

    function latest ($versions=false) {
        // If no version list was supplied, use the Schema::version function to
        // grab a list of versions
        if (!$versions) $versions = $this->items("versions");

        // Return the largest value in the array
        return max($versions);
    }

    function migrate ($version, $allow_downgrade=false) {
        // Determine what the current version of the schema is
        $existing = $this->version();

        // Determine what process will be required to apply the specified
        // database schema
        if ($existing < $version) {
            // Loop forwards through all of the various versions of the schema
            // and apply them
            for ($i = $existing + 1; $i <= $version; $i++) {
                $this->apply($i, "upgrade");
            }

            // Return true to indicate that the changes were applied to the
            // database schema
            return true;
        } elseif ($existing > $version && $allow_downgrade == true) {
            // Loop backwards through all of the versions of the the schema and
            // apply them
            for ($i = $existing; $i >= $version; $i--) {
                $this->apply($i, "downgrade");
            }

            // Return true to indicate that the changes were applied to the
            // database schema
            return true;
        } elseif ($existing == $version) {
            array_push($this->CI->messages, "The current and new schema versions
                       are equal, so there are no updates to apply.");

            // Return false to indicate that the versions are equal
            return false;
        } else {
            array_push($this->CI->messages, "This migration requires
                       downgrading.  However, since you have not allow
                       downgrades, no operations were performed.");

            // Return false to indicate that the changes were not applied
            // because we're not supposed to downgrade the database
            return false;
        }
    }

    function apply ($version, $operation) {
        // Convert version into the type of version that we'll see in the schema
        // definition files
        $text_version = sprintf("%04d", $version);

        // Loop through and apply each one of the schema changes
        foreach (glob(APPPATH . "schemas/{$text_version}_*.php") as $schema) {
            // Load the schema modification file
            require_once($schema);

            // Determine the class name that will be in that schema file
            $schema_class_name = ucwords(substr(basename($schema, ".php"), 5)) .
                "_schema_{$text_version}";

            // Create a new copy of the schema class
            $schema_class = new $schema_class_name();

            // Depending on our operation, run the appropriate command from the
            // schema class file to make the proper changes to the database
            if ($operation == "upgrade") {
                // Upgrade the schema using our schema modification class
                $schema_class->up();

                // Update the version number
                $this->update($version);
            } elseif ($operation == "downgrade") {
                // Downgrade the schema using our schema modification class
                $schema_class->down();

                // Update the version number
                $this->update($version - 1);
            }
        }
    }
}
